<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:security="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--参数配置-->
    <context:property-placeholder location="classpath:config_server.properties"/>
    <!--视图配置-->
    <bean id="jspviewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="1"/>
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="htmlviewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="com.github.dapeng.frame.view.HtmlResourceView"/>
        <property name="order" value="0"/>
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".html"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
    </bean>

    <!-- 默认数据源，配置中心数据源 -->
    <bean id="mainDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${DB_CONFIG_SERVER_URL}"/>
        <property name="username" value="${DB_CONFIG_SERVER_USER}"/>
        <property name="password" value="${DB_CONFIG_SERVER_PASSWD}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="50"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
    </bean>


    <!-- 其他数据源 -->
    <bean id="extraDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${DB_AUTH_URL}"/>
        <property name="username" value="${DB_AUTH_USER}"/>
        <property name="password" value="${DB_AUTH_PASSWD}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="50"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
    </bean>

    <bean class="com.github.dapeng.openapi.cache.ZkBootstrap" init-method="init"/>

    <!--配置 EntityManagerFactory -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--配置jpa提供商的适配器，可以通过内部bean的方式来配置 -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <!-- 配置实体类所在的包 -->
        <property name="packagesToScan" value="com.github.dapeng.entity"/>

        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!--develop-->
                <!--<prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>-->
            </props>

        </property>
    </bean>
    <!-- 配置jpa的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 配置数据源路由规则，使用动态数据源 -->
    <bean id="dataSource" class="com.github.dapeng.datasource.CustomerRoutingDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="mainSource" value-ref="mainDataSource"/>
                <entry key="extraSource" value-ref="extraDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="mainDataSource"/>
    </bean>

    <bean class="com.github.dapeng.util.BuildServerUtil"/>
    <!--scala-sql-->
    <bean id="configServerDatasource" class="com.github.dapeng.datasource.ConfigServerDataSource"/>

    <!--配置支持基于注解事务配置  -->
    <tx:annotation-driven/>

    <!--操作日志记录Aop-->
    <bean class="com.github.dapeng.aop.LogAspect" id="logAspect"/>

    <bean class="com.github.dapeng.web.CheckConnectInfo" init-method="init"/>

    <aop:config>
        <aop:aspect id="loggerAspect" ref="logAspect">
            <aop:around method="record" pointcut="(execution(* com.github.dapeng.web..*.add*(..))
                                              or   execution(* com.github.dapeng.web..*.edit*(..))
                                              or   execution(* com.github.dapeng.web..*.del*(..)))
                                            and !bean(pageController) and !bean(apikeyRestController)"/>
        </aop:aspect>
    </aop:config>


    <!--自定义的filter-->
    <bean class="com.github.dapeng.config.CustomerAccessDecisionManager" id="customerAccessDecisionManager"/>
    <bean class="com.github.dapeng.config.CustomerInvocationSecurityMetadataSource" id="customerInvocationSecurityMetadataSource">
        <constructor-arg name="configServerDataSource" ref="configServerDatasource"/>
    </bean>

    <bean id="filterSecurityInterceptor" class="com.github.dapeng.config.CustomerFilterSecurityInterceptor">
        <property name="accessDecisionManager" ref="customerAccessDecisionManager"/>
        <property name="securityMetadataSource" ref="customerInvocationSecurityMetadataSource"/>
    </bean>

<!-- <security:authorize url='/admin'>   customerFilterSecurityInterceptor 是我们自己实现权限拦截所定义的一个bean -->
    <bean class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator">
        <constructor-arg ref="filterSecurityInterceptor" />
        <!--<constructor-arg name="securityInterceptor" ref="filterSecurityInterceptor" />-->
    </bean>
</beans>
