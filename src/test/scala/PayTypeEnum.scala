package com.today.api.dailyorder.scala.enums;

class PayTypeEnum private(val id: Int, val name: String) extends com.github.dapeng.core.enums.TEnum(id,name) {}

/**
  * Autogenerated by Dapeng-Code-Generator (2.0.4)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

  *

（日结查询）支付类型枚举

  **/
object PayTypeEnum {


  val MEMBER_PAY = new PayTypeEnum(1, "会员支付")

  val CARD_PAY = new PayTypeEnum(2, "刷卡支付")

  val CITYCARD_PAY = new PayTypeEnum(3, "城市一卡通支付")

  val TAKEOUTFOOD_PAY = new PayTypeEnum(4, "外卖")

  val CASH_PAY = new PayTypeEnum(5, "现金支付")

  val MOBILE_PAY = new PayTypeEnum(6, "移动支付")

  val DONGHE_PAY = new PayTypeEnum(7, "东合支付")

  val YOUZAN_PAY = new PayTypeEnum(8, "有赞支付")

  val UNDEFINED = new PayTypeEnum(-1,"UNDEFINED") // undefined enum


  def findByValue(v: Int): PayTypeEnum = {
    v match {
      case 1 => MEMBER_PAY
      case 2 => CARD_PAY
      case 3 => CITYCARD_PAY
      case 4 => TAKEOUTFOOD_PAY
      case 5 => CASH_PAY
      case 6 => MOBILE_PAY
      case 7 => DONGHE_PAY
      case 8 => YOUZAN_PAY

      case _ => new PayTypeEnum(v,"#"+ v)
    }
  }

  def apply(v: Int) = findByValue(v)
  def unapply(v: PayTypeEnum): Option[Int] = Some(v.id)

  def isUndefined(v: Int) = {
    v match {
      case 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 => false
      case _ => true
    }
  }

  def findByLabel(name: String): PayTypeEnum = {
    name match {
      case "会员支付" => MEMBER_PAY
      case "刷卡支付" => CARD_PAY
      case "城市一卡通支付" => CITYCARD_PAY
      case "外卖" => TAKEOUTFOOD_PAY
      case "现金支付" => CASH_PAY
      case "移动支付" => MOBILE_PAY
      case "东合支付" => DONGHE_PAY
      case "有赞支付" => YOUZAN_PAY

      case _ => UNDEFINED
    }

  }

}
